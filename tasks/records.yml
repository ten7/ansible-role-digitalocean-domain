---
- name: Get the first page of domain records
  uri:
    url: "https://api.digitalocean.com/v2/domains/{{ digitalocean_domain.name }}/records?per_page=10"
    method: GET
    headers:
      Authorization: "Bearer {{ digitalocean_api_token }}"
    return_content: yes
  register: _record_total_number

- name: Get all domain record pages
  uri:
    url: "https://api.digitalocean.com/v2/domains/{{ digitalocean_domain.name }}/records?page={{ ansible_loop.index }}&per_page=10"
    method: GET
    headers:
      Authorization: "Bearer {{ digitalocean_api_token }}"
    return_content: yes
  loop: "{{ range((_record_total_number.json.meta.total / 10) | round(0, 'ceil') | int) }}"
  loop_control:
    extended: yes
  register: _record_list

- name: Flatten the list of results into a single list of domains
  set_fact:
    _all_records: "{{ lookup('flattened', _record_list.results | map(attribute='json.domain_records') | list) }}"

- name: Create records
  uri:
    url: "https://api.digitalocean.com/v2/domains/{{ digitalocean_domain.name }}/records"
    method: POST
    headers:
      "Authorization": "Bearer {{ digitalocean_api_token }}"
    return_content: yes
    status_code:
      - 201
    body_format: json
    body:
      type: "{{ item.type }}"
      name: "{{ item.name }}"
      data: "{{ item.value }}{% if (item.type == 'CNAME') or (item.type == 'NS') %}.{% endif %}"
      priority: "{{ item.priority | default(omit) }}"
      port: "{{ item.port | default(omit) }}"
      ttl: "{{ item.port | default(omit) }}"
      weight: "{{ item.weight | default(omit) }}"
      flags: "{{ item.flags | default(omit) }}"
      tag: "{{ item.tag | default(omit) }}"
  loop: "{{ digitalocean_domain.records }}"
  when:
    - "(_all_records | selectattr('type', 'equalto', item.type) | selectattr('name', 'equalto', item.name) | selectattr('data', 'equalto', item.value) | map(attribute='id') | first | default('')) == ''"

- name: Build a list record IDs to update
  set_fact:
    _records_to_update: "{{ (_records_to_update | default([])) + [item | combine({'id': _record_id})] }}"
  loop: "{{ digitalocean_domain.records }}"
  vars:
    _record_id: "{{ _all_records | selectattr('type', 'equalto', item.type) | selectattr('name', 'equalto', item.name) | selectattr('data', 'equalto', item.value) | map(attribute='id') | first | default('') }}"
  when:
    - "_record_id != ''"

- name: Update records
  uri:
    url: "https://api.digitalocean.com/v2/domains/{{ digitalocean_domain.name }}/records/{{ item.id }}"
    method: PUT
    headers:
      "Authorization": "Bearer {{ digitalocean_api_token }}"
    return_content: yes
    status_code:
      - 200
      - 201
    body_format: json
    body:
      type: "{{ item.type }}"
      name: "{{ item.name }}"
      data: "{{ item.value }}{% if (item.type == 'CNAME') or (item.type == 'NS') %}.{% endif %}"
      priority: "{{ item.priority | default('null') }}"
      port: "{{ item.port | default('null') }}"
      ttl: "{{ item.port | default('1800') }}"
      weight: "{{ item.weight | default('null') }}"
      flags: "{{ item.flags | default('null') }}"
      tag: "{{ item.tag | default('null') }}"
  loop: "{{ _records_to_update | default([]) }}"
  when:
    - "(item.state | default('present')) == 'present'"

- name: Delete records
  uri:
    url: "https://api.digitalocean.com/v2/domains/{{ digitalocean_domain.name }}/records/{{ item.id }}"
    method: DELETE
    headers:
      "Authorization": "Bearer {{ digitalocean_api_token }}"
    status_code:
      - 204
  loop: "{{ _records_to_update | default([]) }}"
  when:
    - "(item.state | default('present')) == 'absent'"
